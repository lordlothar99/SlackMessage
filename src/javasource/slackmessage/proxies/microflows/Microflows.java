// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package slackmessage.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the SlackMessage module
	public static void aSu_SlackMessage(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SlackMessage.ASu_SlackMessage").withParams(params).execute(context);
	}
	public static boolean bCo_IncomingWebhook(IContext context, slackmessage.proxies.IncomingWebhook _incomingWebhook)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhook", _incomingWebhook == null ? null : _incomingWebhook.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.BCo_IncomingWebhook").withParams(params).execute(context);
	}
	public static boolean bCo_SlackApp(IContext context, slackmessage.proxies.SlackApp _slackApp)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlackApp", _slackApp == null ? null : _slackApp.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.BCo_SlackApp").withParams(params).execute(context);
	}
	public static java.lang.String cal_SlackApp_SlackConfigUrl(IContext context, slackmessage.proxies.SlackApp _slackApp)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlackApp", _slackApp == null ? null : _slackApp.getMendixObject());
		return (java.lang.String) Core.microflowCall("SlackMessage.Cal_SlackApp_SlackConfigUrl").withParams(params).execute(context);
	}
	public static java.lang.String commandHealth_DoTheMagic(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("SlackMessage.CommandHealth_DoTheMagic").withParams(params).execute(context);
	}
	public static slackmessage.proxies.Enum_TextType convert_Mrkdwn_TextType(IContext context, boolean _mrkdwn)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Mrkdwn", _mrkdwn);
		java.lang.String result = (java.lang.String) Core.microflowCall("SlackMessage.Convert_Mrkdwn_TextType").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.Enum_TextType.valueOf(result);
	}
	public static boolean convert_TextType_Mrkdwn(IContext context, slackmessage.proxies.Enum_TextType _textType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TextType", _textType == null ? null : _textType.name());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.Convert_TextType_Mrkdwn").withParams(params).execute(context);
	}
	public static java.lang.String decryptString(IContext context, java.lang.String _stringToDecrypt)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StringToDecrypt", _stringToDecrypt);
		return (java.lang.String) Core.microflowCall("SlackMessage.DecryptString").withParams(params).execute(context);
	}
	public static java.lang.String encryptionPrefix_SlackAES(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("SlackMessage.EncryptionPrefix_SlackAES").withParams(params).execute(context);
	}
	public static java.lang.String encryptString(IContext context, java.lang.String _stringToEncrypt)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StringToEncrypt", _stringToEncrypt);
		return (java.lang.String) Core.microflowCall("SlackMessage.EncryptString").withParams(params).execute(context);
	}
	public static system.proxies.HttpHeader httpHeaderList_FindHeader(IContext context, java.lang.String _key, java.util.List<system.proxies.HttpHeader> _httpHeaderList, slackmessage.proxies.SlashCommandRequest _slashCommandRequest, boolean _isRequired)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Key", _key);
		java.util.ArrayList<IMendixObject> listparam_httpHeaderList = null;
		if (_httpHeaderList != null)
		{
			listparam_httpHeaderList = new java.util.ArrayList<>();
			for (system.proxies.HttpHeader obj : _httpHeaderList)
				listparam_httpHeaderList.add(obj.getMendixObject());
		}
		params.put("HttpHeaderList", listparam_httpHeaderList);

		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		params.put("IsRequired", _isRequired);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.HttpHeaderList_FindHeader").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpHeader.initialize(context, result);
	}
	public static slackmessage.proxies.IncomingWebhook incomingWebhook_Ensure(IContext context, java.lang.String _label, java.lang.String _key, java.lang.String _uRL)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Label", _label);
		params.put("Key", _key);
		params.put("URL", _uRL);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.IncomingWebhook_Ensure").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.IncomingWebhook.initialize(context, result);
	}
	public static slackmessage.proxies.IncomingWebhook incomingWebhook_RetrieveByKey(IContext context, java.lang.String _incomingWebhookKey, boolean _autoCreate)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhookKey", _incomingWebhookKey);
		params.put("AutoCreate", _autoCreate);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.IncomingWebhook_RetrieveByKey").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.IncomingWebhook.initialize(context, result);
	}
	public static slackmessage.proxies.IncomingWebhook incomingWebhook_Upsert(IContext context, java.lang.String _label, java.lang.String _key, java.lang.String _uRL)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Label", _label);
		params.put("Key", _key);
		params.put("URL", _uRL);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.IncomingWebhook_Upsert").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.IncomingWebhook.initialize(context, result);
	}
	public static boolean incomingWebhook_Validate(IContext context, slackmessage.proxies.IncomingWebhook _incomingWebhook)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhook", _incomingWebhook == null ? null : _incomingWebhook.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.IncomingWebhook_Validate").withParams(params).execute(context);
	}
	public static void iVK_IncomingWebhook_New(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SlackMessage.IVK_IncomingWebhook_New").withParams(params).execute(context);
	}
	public static void iVK_IncomingWebhook_Save(IContext context, slackmessage.proxies.IncomingWebhook _incomingWebhook)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhook", _incomingWebhook == null ? null : _incomingWebhook.getMendixObject());
		Core.microflowCall("SlackMessage.IVK_IncomingWebhook_Save").withParams(params).execute(context);
	}
	public static void iVK_IncomingWebhook_SendTestMessage(IContext context, slackmessage.proxies.IncomingWebhook _incomingWebhook)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhook", _incomingWebhook == null ? null : _incomingWebhook.getMendixObject());
		Core.microflowCall("SlackMessage.IVK_IncomingWebhook_SendTestMessage").withParams(params).execute(context);
	}
	public static void iVK_IncomingWebhook_SendTestMessageNotification(IContext context, slackmessage.proxies.IncomingWebhook _incomingWebhook)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhook", _incomingWebhook == null ? null : _incomingWebhook.getMendixObject());
		Core.microflowCall("SlackMessage.IVK_IncomingWebhook_SendTestMessageNotification").withParams(params).execute(context);
	}
	public static void iVK_IncomingWebhookList_Encrypt(IContext context, java.util.List<slackmessage.proxies.IncomingWebhook> _incomingWebhookList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_incomingWebhookList = null;
		if (_incomingWebhookList != null)
		{
			listparam_incomingWebhookList = new java.util.ArrayList<>();
			for (slackmessage.proxies.IncomingWebhook obj : _incomingWebhookList)
				listparam_incomingWebhookList.add(obj.getMendixObject());
		}
		params.put("IncomingWebhookList", listparam_incomingWebhookList);

		Core.microflowCall("SlackMessage.IVK_IncomingWebhookList_Encrypt").withParams(params).execute(context);
	}
	public static void iVK_SlackApp_Save(IContext context, slackmessage.proxies.SlackApp _slackApp)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlackApp", _slackApp == null ? null : _slackApp.getMendixObject());
		Core.microflowCall("SlackMessage.IVK_SlackApp_Save").withParams(params).execute(context);
	}
	public static void message_AddLine(IContext context, slackmessage.proxies.Message _message, slackmessage.proxies.Enum_TextType _textType, java.lang.String _messageText)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("TextType", _textType == null ? null : _textType.name());
		params.put("MessageText", _messageText);
		Core.microflowCall("SlackMessage.Message_AddLine").withParams(params).execute(context);
	}
	public static slackmessage.proxies.Message message_Create(IContext context, java.lang.String _notificationText, slackmessage.proxies.Enum_TextType _textType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("NotificationText", _notificationText);
		params.put("TextType", _textType == null ? null : _textType.name());
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.Message_Create").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.Message.initialize(context, result);
	}
	public static boolean message_CreateAndSendToWebhookKey(IContext context, java.lang.String _notificationText, slackmessage.proxies.Enum_TextType _notificationTextType, java.lang.String _messageText, slackmessage.proxies.Enum_TextType _messageTextType, java.lang.String _incomingWebhookKey, boolean _sendAsync)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("NotificationText", _notificationText);
		params.put("NotificationTextType", _notificationTextType == null ? null : _notificationTextType.name());
		params.put("MessageText", _messageText);
		params.put("MessageTextType", _messageTextType == null ? null : _messageTextType.name());
		params.put("IncomingWebhookKey", _incomingWebhookKey);
		params.put("SendAsync", _sendAsync);
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.Message_CreateAndSendToWebhookKey").withParams(params).execute(context);
	}
	public static boolean message_CreateAndSendToWebhookURL(IContext context, java.lang.String _notificationText, slackmessage.proxies.Enum_TextType _notificationTextType, java.lang.String _messageText, slackmessage.proxies.Enum_TextType _messageTextType, java.lang.String _incomingWebhookURL, boolean _sendAsync)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("NotificationText", _notificationText);
		params.put("NotificationTextType", _notificationTextType == null ? null : _notificationTextType.name());
		params.put("MessageText", _messageText);
		params.put("MessageTextType", _messageTextType == null ? null : _messageTextType.name());
		params.put("IncomingWebhookURL", _incomingWebhookURL);
		params.put("SendAsync", _sendAsync);
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.Message_CreateAndSendToWebhookURL").withParams(params).execute(context);
	}
	public static java.lang.String message_ExportToJSON(IContext context, slackmessage.proxies.Message _message)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message == null ? null : _message.getMendixObject());
		return (java.lang.String) Core.microflowCall("SlackMessage.Message_ExportToJSON").withParams(params).execute(context);
	}
	public static boolean message_SendToWebhookKey(IContext context, java.lang.String _incomingWebhookKey, slackmessage.proxies.Message _message, boolean _sendAsync)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhookKey", _incomingWebhookKey);
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("SendAsync", _sendAsync);
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.Message_SendToWebhookKey").withParams(params).execute(context);
	}
	public static boolean message_SendToWebhookURL(IContext context, java.lang.String _incomingWebhookURL, slackmessage.proxies.Message _message, boolean _sendAsync)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhookURL", _incomingWebhookURL);
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("SendAsync", _sendAsync);
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.Message_SendToWebhookURL").withParams(params).execute(context);
	}
	public static void pRS_SlashCommand_AnyCommand(IContext context, system.proxies.HttpRequest _httpRequest, system.proxies.HttpResponse _httpResponse)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("httpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		Core.microflowCall("SlackMessage.PRS_SlashCommand_AnyCommand").withParams(params).execute(context);
	}
	public static void sE_SendToSlackHelper_Cleanup(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("SlackMessage.SE_SendToSlackHelper_Cleanup").withParams(params).execute(context);
	}
	public static slackmessage.proxies.SendToSlackHelper sendToSlackHelper_Create(IContext context, java.lang.String _incomingWebhookString, slackmessage.proxies.Enum_IncomingWebhook_Type _incomingWebhookType, slackmessage.proxies.Message _message, boolean _persist, boolean _sendAsync)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("IncomingWebhookString", _incomingWebhookString);
		params.put("IncomingWebhookType", _incomingWebhookType == null ? null : _incomingWebhookType.name());
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("Persist", _persist);
		params.put("SendAsync", _sendAsync);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.SendToSlackHelper_Create").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.SendToSlackHelper.initialize(context, result);
	}
	public static boolean sendToSlackHelper_Post(IContext context, slackmessage.proxies.SendToSlackHelper _sendToSlackHelper)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SendToSlackHelper", _sendToSlackHelper == null ? null : _sendToSlackHelper.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.SendToSlackHelper_Post").withParams(params).execute(context);
	}
	public static boolean sendToSlackHelper_Send(IContext context, slackmessage.proxies.SendToSlackHelper _sendToSlackHelper)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SendToSlackHelper", _sendToSlackHelper == null ? null : _sendToSlackHelper.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.SendToSlackHelper_Send").withParams(params).execute(context);
	}
	public static slackmessage.proxies.SlackApp slackApp_Ensure(IContext context, java.lang.String _name, java.lang.String _appID, java.lang.String _signingSecret)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		params.put("AppID", _appID);
		params.put("SigningSecret", _signingSecret);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.SlackApp_Ensure").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.SlackApp.initialize(context, result);
	}
	public static slackmessage.proxies.SlackApp slackApp_Upsert(IContext context, java.lang.String _name, java.lang.String _appID, java.lang.String _signingSecret)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		params.put("AppID", _appID);
		params.put("SigningSecret", _signingSecret);
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.SlackApp_Upsert").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.SlackApp.initialize(context, result);
	}
	public static boolean slackApp_Validate(IContext context, slackmessage.proxies.SlackApp _slackApp)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlackApp", _slackApp == null ? null : _slackApp.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("SlackMessage.SlackApp_Validate").withParams(params).execute(context);
	}
	public static void slashCommand_Log(IContext context, slackmessage.proxies.SlashCommandRequest _slashCommandRequest, communitycommons.proxies.LogLevel _logLevel, java.lang.String _message)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		params.put("LogLevel", _logLevel == null ? null : _logLevel.name());
		params.put("Message", _message);
		Core.microflowCall("SlackMessage.SlashCommand_Log").withParams(params).execute(context);
	}
	public static slackmessage.proxies.SlashCommandRequest slashCommandRequest_Create(IContext context, system.proxies.HttpRequest _httpRequest, system.proxies.HttpResponse _httpResponse)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("HttpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("HttpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.SlashCommandRequest_Create").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.SlashCommandRequest.initialize(context, result);
	}
	public static slackmessage.proxies.SlashCommandRequest slashCommandRequest_ParseRequestBody(IContext context, system.proxies.HttpRequest _httpRequest, java.lang.String _uUID, system.proxies.HttpResponse _httpResponse)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("HttpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("UUID", _uUID);
		params.put("HttpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("SlackMessage.SlashCommandRequest_ParseRequestBody").withParams(params).execute(context);
		return result == null ? null : slackmessage.proxies.SlashCommandRequest.initialize(context, result);
	}
	public static void slashCommandRequest_ParseRequestHeaders(IContext context, system.proxies.HttpRequest _httpRequest, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("HttpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandRequest_ParseRequestHeaders").withParams(params).execute(context);
	}
	public static void slashCommandRequest_ProcessAnyCommand(IContext context, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandRequest_ProcessAnyCommand").withParams(params).execute(context);
	}
	public static void slashCommandRequest_ProcessHealthCommand(IContext context, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandRequest_ProcessHealthCommand").withParams(params).execute(context);
	}
	public static void slashCommandRequest_Validate(IContext context, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandRequest_Validate").withParams(params).execute(context);
	}
	public static void slashCommandResponse_Create(IContext context, java.lang.String _message, slackmessage.proxies.Enum_SlashCommand_ResponseVisibility _channelVisibility, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message);
		params.put("ChannelVisibility", _channelVisibility == null ? null : _channelVisibility.name());
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandResponse_Create").withParams(params).execute(context);
	}
	public static void slashCommandResponse_Create_VisibilityChannel(IContext context, java.lang.String _message, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message);
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandResponse_Create_VisibilityChannel").withParams(params).execute(context);
	}
	public static void slashCommandResponse_Create_VisibilityUser(IContext context, java.lang.String _message, slackmessage.proxies.SlashCommandRequest _slashCommandRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message);
		params.put("SlashCommandRequest", _slashCommandRequest == null ? null : _slashCommandRequest.getMendixObject());
		Core.microflowCall("SlackMessage.SlashCommandResponse_Create_VisibilityUser").withParams(params).execute(context);
	}
}